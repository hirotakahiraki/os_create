     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; �I�u�W�F�N�g�t�@�C������郂�[�h	
     5 00000000                                 [INSTRSET "i486p"]				; 486�̖��߂܂Ŏg�������Ƃ����L�q
     6 00000000                                 [BITS 32]						; 32�r�b�g���[�h�p�̋@�B�����点��
     7 00000000                                 [FILE "naskfunc.nas"]			; �\�[�X�t�@�C�������
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL 	_io_in8, _io_in16, _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL  _write_mem8
    14 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    15 00000000                                 		GLOBAL 	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c, _asm_inthandler20
    16 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c, _inthandler20
    17 00000000                                 		GLOBAL  _load_cr0, _store_cr0
    18 00000000                                 		GLOBAL  _memtest_sub
    19 00000000                                 		GLOBAL	_load_tr
    20 00000000                                 		GLOBAL	_taskswitch4
    21 00000000                                 
    22 00000000                                 
    23                                          [SECTION .text]
    24 00000000                                 
    25 00000000                                 _io_hlt:	; void io_hlt(void);
    26 00000000 F4                              		HLT
    27 00000001 C3                              		RET
    28 00000002                                 
    29 00000002                                 _io_cli:	; void io_cli(void);
    30 00000002 FA                              		CLI
    31 00000003 C3                              		RET
    32 00000004                                 
    33 00000004                                 _io_sti:	; void io_sti(void);
    34 00000004 FB                              		STI
    35 00000005 C3                              		RET
    36 00000006                                 
    37 00000006                                 _io_stihlt:	; void io_stihlt(void);
    38 00000006 FB                              		STI
    39 00000007 F4                              		HLT
    40 00000008 C3                              		RET
    41 00000009                                 
    42 00000009                                 _io_in8:	; int io_in8(int port);
    43 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		;port
    44 0000000D B8 00000000                     		MOV		EAX,0
    45 00000012 EC                              		IN		AL,DX
    46 00000013 C3                              		RET
    47 00000014                                 
    48 00000014                                 _io_in16:	; int io_in16(int port);
    49 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		;port
    50 00000018 B8 00000000                     		MOV		EAX,0
    51 0000001D 66 ED                           		IN		AX,DX
    52 0000001F C3                              		RET
    53 00000020                                 
    54 00000020                                 _io_in32:	; int io_in32(int port);
    55 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]			;port
    56 00000024 ED                              		IN		EAX,DX
    57 00000025 C3                              		RET
    58 00000026                                 
    59 00000026                                 _io_out8:	; void io_out8(int port, int data);
    60 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]			;port
    61 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]			;data
    62 0000002E EE                              		OUT		DX,AL
    63 0000002F C3                              		RET
    64 00000030                                 
    65 00000030                                 _io_out16:	; void io_out16(int port, int data);
    66 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]			;port
    67 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]			;data
    68 00000038 66 EF                           		OUT		DX,AX
    69 0000003A C3                              		RET
    70 0000003B                                 
    71 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    72 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]			;port
    73 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]			;data
    74 00000043 EF                              		OUT		DX,EAX
    75 00000044 C3                              		RET
    76 00000045                                 
    77 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    78 00000045 9C                              		PUSHFD		; PUSH EFLAGS ということ
    79 00000046 58                              		POP		EAX
    80 00000047 C3                              		RET
    81 00000048                                 
    82 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    83 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    84 0000004C 50                              		PUSH		EAX
    85 0000004D 9D                              		POPFD		;pop eflags
    86 0000004E C3                              		RET
    87 0000004F                                 		
    88 0000004F                                 _write_mem8:	; void write_mem8(int addr, int data);
    89 0000004F 8B 4C 24 04                     		MOV		ECX,[ESP+4]		; [ESP+4]��addr�������Ă���̂ł����ECX�ɓǂݍ���
    90 00000053 8A 44 24 08                     		MOV		AL,[ESP+8]		; [ESP+8]��data�������Ă���̂ł����AL�ɓǂݍ���
    91 00000057 88 01                           		MOV		[ECX],AL
    92 00000059 C3                              		RET
    93 0000005A                                 
    94 0000005A                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    95 0000005A 66 8B 44 24 04                  		MOV		AX,[ESP+4]		;limit
    96 0000005F 66 89 44 24 06                  		MOV		[ESP+6],AX
    97 00000064 0F 01 54 24 06                  		LGDT	[ESP+6]
    98 00000069 C3                              		RET
    99 0000006A                                 
   100 0000006A                                 _load_idtr:		; void load_idtr(int limit, int addr);
   101 0000006A 66 8B 44 24 04                  		MOV		AX,[ESP+4]		;limit
   102 0000006F 66 89 44 24 06                  		MOV		[ESP+6],AX
   103 00000074 0F 01 5C 24 06                  		LIDT	[ESP+6]
   104 00000079 C3                              		RET
   105 0000007A                                 
   106 0000007A                                 _asm_inthandler21:		; void asm_inthandler21();
   107 0000007A 06                              		PUSH 	ES
   108 0000007B 1E                              		PUSH 	DS
   109 0000007C 60                              		PUSHAD
   110 0000007D 89 E0                           		MOV		EAX,ESP
   111 0000007F 50                              		PUSH	EAX
   112 00000080 66 8C D0                        		MOV		AX,SS
   113 00000083 8E D8                           		MOV		DS,AX
   114 00000085 8E C0                           		MOV		ES,AX
   115 00000087 E8 [00000000]                   		CALL	_inthandler21
   116 0000008C 58                              		POP		EAX
   117 0000008D 61                              		POPAD
   118 0000008E 1F                              		POP		DS
   119 0000008F 07                              		POP		ES
   120 00000090 CF                              		IRETD
   121 00000091                                 
   122 00000091                                 _asm_inthandler27:		; void asm_inthandler27();
   123 00000091 06                              		PUSH 	ES
   124 00000092 1E                              		PUSH 	DS
   125 00000093 60                              		PUSHAD
   126 00000094 89 E0                           		MOV		EAX,ESP
   127 00000096 50                              		PUSH	EAX
   128 00000097 66 8C D0                        		MOV		AX,SS
   129 0000009A 8E D8                           		MOV		DS,AX
   130 0000009C 8E C0                           		MOV		ES,AX
   131 0000009E E8 [00000000]                   		CALL	_inthandler27
   132 000000A3 58                              		POP		EAX
   133 000000A4 61                              		POPAD
   134 000000A5 1F                              		POP		DS
   135 000000A6 07                              		POP		ES
   136 000000A7 CF                              		IRETD
   137 000000A8                                 
   138 000000A8                                 _asm_inthandler2c:		; void asm_inthandler2c();
   139 000000A8 06                              		PUSH 	ES
   140 000000A9 1E                              		PUSH 	DS
   141 000000AA 60                              		PUSHAD
   142 000000AB 89 E0                           		MOV		EAX,ESP
   143 000000AD 50                              		PUSH	EAX
   144 000000AE 66 8C D0                        		MOV		AX,SS
   145 000000B1 8E D8                           		MOV		DS,AX
   146 000000B3 8E C0                           		MOV		ES,AX
   147 000000B5 E8 [00000000]                   		CALL	_inthandler2c
   148 000000BA 58                              		POP		EAX
   149 000000BB 61                              		POPAD
   150 000000BC 1F                              		POP		DS
   151 000000BD 07                              		POP		ES
   152 000000BE CF                              		IRETD
   153 000000BF                                 
   154 000000BF                                 _load_cr0:			; int load_cr0(void);
   155 000000BF 0F 20 C0                        		MOV		EAX, CR0
   156 000000C2 C3                              		RET
   157 000000C3                                 
   158 000000C3                                 _store_cr0:			; void store_cr0(int cr0);
   159 000000C3 8B 44 24 04                     		MOV		EAX,[ESP+4]
   160 000000C7 0F 22 C0                        		MOV		CR0,EAX
   161 000000CA C3                              		RET
   162 000000CB                                 
   163 000000CB                                 _memtest_sub:		; unsigned int memtest_sub(unsigned int start, unsigned int end);
   164 000000CB 57                              		PUSH	EDI
   165 000000CC 56                              		PUSH	ESI
   166 000000CD 53                              		PUSH	EBX
   167 000000CE BE AA55AA55                     		MOV		ESI, 0xaa55aa55			; pat0 = 0xaa55aa55
   168 000000D3 BF 55AA55AA                     		MOV		EDI, 0x55aa55aa			; pat1 = 0x55aa55aa
   169 000000D8 8B 44 24 10                     		MOV		EAX, [ESP+12+4] 		; i = start;
   170 000000DC                                 mts_loop:
   171 000000DC 89 C3                           		MOV		EBX,EAX	
   172 000000DE 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   173 000000E4 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   174 000000E6 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   175 000000E8 83 33 FF                        		XOR 	DWORD [EBX], 0xffffffff	; *p ^= 0xffffffff;
   176 000000EB 3B 3B                           		CMP		EDI, [EBX]				; if(*p != pat1) goto fin;
   177 000000ED 75 18                           		JNE		mts_fin					
   178 000000EF 83 33 FF                        		XOR		DWORD [EBX], 0xffffffff	; *p ^= 0xffffffff;
   179 000000F2 3B 33                           		CMP		ESI, [EBX]				; if(*p != pat0) goto fin;
   180 000000F4 75 11                           		JNE		mts_fin					
   181 000000F6 89 13                           		MOV		[EBX],EDX				; *p = old;
   182 000000F8 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   183 000000FD 3B 44 24 14                     		CMP		EAX, [ESP+12+8]			; if(i<=end) goto mts_loop;
   184 00000101 76 D9                           		JBE		mts_loop
   185 00000103 5B                              		POP		EBX
   186 00000104 5E                              		POP		ESI
   187 00000105 5F                              		POP		EDI
   188 00000106 C3                              		RET
   189 00000107                                 mts_fin:
   190 00000107 89 13                           		MOV [EBX],EDX
   191 00000109 5B                              		POP		EBX
   192 0000010A 5E                              		POP		ESI
   193 0000010B 5F                              		POP		EDI
   194 0000010C C3                              		RET
   195 0000010D                                 
   196 0000010D                                 _asm_inthandler20:		
   197 0000010D 06                              		PUSH	ES
   198 0000010E 1E                              		PUSH	DS
   199 0000010F 60                              		PUSHAD
   200 00000110 89 E0                           		MOV		EAX, ESP
   201 00000112 50                              		PUSH	EAX
   202 00000113 66 8C D0                        		MOV		AX,SS
   203 00000116 8E D8                           		MOV		DS,AX
   204 00000118 8E C0                           		MOV		ES,AX
   205 0000011A E8 [00000000]                   		CALL	_inthandler20
   206 0000011F 58                              		POP		EAX
   207 00000120 61                              		POPAD
   208 00000121 1F                              		POP		DS
   209 00000122 07                              		POP		ES
   210 00000123 CF                              		IRETD
   211 00000124                                 
   212 00000124                                 _load_tr:		; void load_tr(int tr);
   213 00000124 0F 00 5C 24 04                  		LTR		[ESP+4] ;tr
   214 00000129 C3                              		RET
   215 0000012A                                 
   216 0000012A                                 _taskswitch4:	; void taskswitch4(void)
   217 0000012A EA 00000000 0020                		JMP		4*8:0
   218 00000131 C3                              		RET